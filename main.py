import cv2
import pytesseract
import requests
import os
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Tesseract
pytesseract.pytesseract.tesseract_cmd = r"C:\Program Files\Tesseract-OCR\tesseract.exe"

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
frameWidth = 1000
frameHeight = 480
minArea = 500
count = 0

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
if not os.path.exists("./IMAGES"):
    os.makedirs("./IMAGES")

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Å–∫–∞–¥–∞
plateCascade = cv2.CascadeClassifier("haarcascade_russian_plate_number.xml")
if plateCascade.empty():
    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Å–∫–∞–¥. –ü—Ä–æ–≤–µ—Ä—å –ø—É—Ç—å –∫ 'haarcascade_russian_plate_number.xml'")
    exit()

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–∞–º–µ—Ä–µ
cap = cv2.VideoCapture(0)
cap.set(3, frameWidth)
cap.set(4, frameHeight)
cap.set(10, 150)

while True:
    success, img = cap.read()
    if not success:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞–¥—Ä —Å –∫–∞–º–µ—Ä—ã")
        continue

    imgGray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    numberPlates = plateCascade.detectMultiScale(imgGray, 1.1, 4)

    for (x, y, w, h) in numberPlates:
        area = w * h
        if area > minArea:
            cv2.rectangle(img, (x, y), (x + w, y + h), (255, 0, 0), 2)
            cv2.putText(img, "NumberPlate", (x, y - 5), cv2.FONT_HERSHEY_COMPLEX, 1, (0, 0, 255), 2)

            imgRoi = img[y:y + h, x:x + w]
            cv2.imshow("Number Plate", imgRoi)

            key = cv2.waitKey(1) & 0xFF
            if key == ord('s'):
                if imgRoi.size > 0:
                    filename = os.path.join("IMAGES", f"{count}.jpg")
                    success_save = cv2.imwrite(filename, imgRoi)
                    print(f"üì∑ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {filename} ‚Äî –£—Å–ø–µ—à–Ω–æ? {success_save}")

                    # –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
                    custom_config = r'--oem 3 --psm 7'
                    number = pytesseract.image_to_string(imgRoi, config=custom_config).strip()
                    print("üî§ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:", number)

                    # –ü—Ä–∏–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–∫–∏ POST-–∑–∞–ø—Ä–æ—Å–∞
                    if number:
                        time = datetime.now()
                        data = {'plateNumber': number}
                        headers = {"Content-Type": "application/json"}
                        try:
                            response = requests.post('http://localhost:8080/v1/api', json=data, headers=headers)
                            print("üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:", response.status_code)
                        except Exception as e:
                            print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:", e)

                    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ —ç–∫—Ä–∞–Ω–µ
                    cv2.rectangle(img, (0, 200), (640, 300), (0, 255, 0), cv2.FILLED)
                    cv2.putText(img, "Scan Saved", (15, 265), cv2.FONT_HERSHEY_COMPLEX, 2, (0, 0, 255), 2)
                    cv2.imshow("Result", img)
                    cv2.waitKey(500)
                    count += 1

    cv2.imshow("Result", img)

    # –í—ã—Ö–æ–¥ –ø–æ –∫–ª–∞–≤–∏—à–µ 'q'
    if cv2.waitKey(1) & 0xFF == ord('q'):
        print("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã")
        break

cap.release()
cv2.destroyAllWindows()
